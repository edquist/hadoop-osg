From 380fea3d166b1c22910c45314d74d68acafe0c23 Mon Sep 17 00:00:00 2001
From: Sandy Ryza <sandy@cloudera.com>
Date: Mon, 4 Nov 2013 17:04:33 -0800
Subject: [PATCH 1511/1612] CLOUDERA-BUILD. MR1: Dump stacks on task timeout.

This will go in upstream as MAPREDUCE-5592.

Ref: CDH-492
Reason: Request from support
---
 .../org/apache/hadoop/mapred/JvmManager.java       |   79 ++++++++++++-------
 .../org/apache/hadoop/mapred/TaskRunner.java       |    6 +-
 .../org/apache/hadoop/mapred/TaskTracker.java      |   46 +++++++-----
 .../org/apache/hadoop/mapred/TestJvmManager.java   |    4 +-
 4 files changed, 82 insertions(+), 53 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JvmManager.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JvmManager.java
index 9adbc89..ac6c266 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JvmManager.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JvmManager.java
@@ -50,6 +50,8 @@ class JvmManager {
 
   private JvmManagerForType reduceJvmManager;
   
+  private static final boolean DUMP_STACKS_BEFORE = true;
+  
   public JvmEnv constructJvmEnv(List<String> setup, Vector<String>vargs,
       File stdout,File stderr,long logSize, File workDir, 
       JobConf conf) {
@@ -152,20 +154,21 @@ class JvmManager {
     }
   }
 
-  public void taskKilled(TaskRunner tr
-                         ) throws IOException, InterruptedException {
+  public void taskKilled(TaskRunner tr, boolean dumpStacksBefore)
+      throws IOException, InterruptedException {
     if (tr.getTask().isMapTask()) {
-      mapJvmManager.taskKilled(tr);
+      mapJvmManager.taskKilled(tr, dumpStacksBefore);
     } else {
-      reduceJvmManager.taskKilled(tr);
+      reduceJvmManager.taskKilled(tr, dumpStacksBefore);
     }
   }
-
-  public void killJvm(JVMId jvmId) throws IOException, InterruptedException {
+  
+  public void killJvm(JVMId jvmId) throws IOException,
+      InterruptedException {
     if (jvmId.isMap) {
-      mapJvmManager.killJvm(jvmId);
+      mapJvmManager.killJvm(jvmId, !DUMP_STACKS_BEFORE);
     } else {
-      reduceJvmManager.killJvm(jvmId);
+      reduceJvmManager.killJvm(jvmId, !DUMP_STACKS_BEFORE);
     }
   }  
 
@@ -206,6 +209,7 @@ class JvmManager {
     int maxJvms;
     boolean isMap;
     private final long sleeptimeBeforeSigkill;
+    private static final long SLEEPTIME_AFTER_SIGQUIT = 750;
     
     Random rand = new Random(System.currentTimeMillis());
     static final String DELAY_BEFORE_KILL_KEY =
@@ -280,21 +284,20 @@ class JvmManager {
       }
     }
 
-    synchronized public void taskKilled(TaskRunner tr
-                                        ) throws IOException,
-                                                 InterruptedException {
+    synchronized public void taskKilled(TaskRunner tr,
+        boolean dumpStacksBefore) throws IOException, InterruptedException {
       JVMId jvmId = runningTaskToJvm.remove(tr);
       if (jvmId != null) {
         jvmToRunningTask.remove(jvmId);
-        killJvm(jvmId);
+        killJvm(jvmId, dumpStacksBefore);
       }
     }
 
-    synchronized public void killJvm(JVMId jvmId) throws IOException, 
-                                                         InterruptedException {
+    synchronized public void killJvm(JVMId jvmId, boolean dumpStacksBefore)
+        throws IOException, InterruptedException {
       JvmRunner jvmRunner;
       if ((jvmRunner = jvmIdToRunner.get(jvmId)) != null) {
-        killJvmRunner(jvmRunner);
+        killJvmRunner(jvmRunner, dumpStacksBefore);
       }
     }
     
@@ -307,14 +310,13 @@ class JvmManager {
       List <JvmRunner> list = new ArrayList<JvmRunner>();
       list.addAll(jvmIdToRunner.values());
       for (JvmRunner jvm : list) {
-        killJvmRunner(jvm);
+        killJvmRunner(jvm, false);
       }
     }
 
-    private synchronized void killJvmRunner(JvmRunner jvmRunner
-                                            ) throws IOException,
-                                                     InterruptedException {
-      jvmRunner.kill();
+    private synchronized void killJvmRunner(JvmRunner jvmRunner, boolean dumpStacksBefore
+                                            ) throws IOException, InterruptedException {
+      jvmRunner.kill(dumpStacksBefore);
       removeJvm(jvmRunner.jvmId);
     }
 
@@ -378,7 +380,7 @@ class JvmManager {
       if (spawnNewJvm) {
         if (runnerToKill != null) {
           LOG.info("Killing JVM: " + runnerToKill.jvmId);
-          killJvmRunner(runnerToKill);
+          killJvmRunner(runnerToKill, false);
         }
         spawnNewJvm(jobId, env, t);
         return;
@@ -505,7 +507,7 @@ class JvmManager {
         } finally { // handle the exit code
           // although the process has exited before we get here,
           // make sure the entire process group has also been killed.
-          kill();
+          kill(!DUMP_STACKS_BEFORE);
           updateOnJvmExit(jvmId, exitCode);
           LOG.info("JVM : " + jvmId + " exited with exit code " + exitCode
               + ". Number of tasks it ran: " + numTasksRan);
@@ -539,7 +541,7 @@ class JvmManager {
         }
       }
 
-      synchronized void kill() throws IOException, InterruptedException {
+      synchronized void kill(boolean dumpStacksBefore) throws IOException, InterruptedException {
         if (!killed) {
           TaskController controller = tracker.getTaskController();
           // Check inital context before issuing a kill to prevent situations
@@ -548,13 +550,32 @@ class JvmManager {
           if (pidStr != null) {
             String user = env.conf.getUser();
             int pid = Integer.parseInt(pidStr);
-            // start a thread that will kill the process dead
-            if (sleeptimeBeforeSigkill > 0) {
-              new DelayedProcessKiller(user, pid, sleeptimeBeforeSigkill, 
-                                       Signal.KILL).start();
-              controller.signalTask(user, pid, Signal.TERM);
+            // Send a signal and then start threads to send additional signals later.
+            // In normal conditions, we send a SIGTERM immediately and a SIGKILL later.
+            // If sleeptimeBeforeSigkill is 0, we don't send the SIGTERM and
+            // instead send the SIGKILL immediately.
+            // If dumpStacksBefore is true, we start with a SIGQUIT (to make the
+            // child process dump its stacks) and then follow up with the
+            // SIGTERM/SIGKILL later.
+            if (dumpStacksBefore) {
+              controller.signalTask(user, pid, Signal.QUIT);
+              if (sleeptimeBeforeSigkill > 0) {
+                new DelayedProcessKiller(user, pid, SLEEPTIME_AFTER_SIGQUIT,
+                    Signal.TERM).start();
+                new DelayedProcessKiller(user, pid, SLEEPTIME_AFTER_SIGQUIT
+                    + sleeptimeBeforeSigkill, Signal.KILL).start();
+              } else {
+                new DelayedProcessKiller(user, pid, SLEEPTIME_AFTER_SIGQUIT,
+                    Signal.KILL).start();
+              }
             } else {
-              controller.signalTask(user, pid, Signal.KILL);
+              if (sleeptimeBeforeSigkill > 0) {
+                controller.signalTask(user, pid, Signal.TERM);
+                new DelayedProcessKiller(user, pid, sleeptimeBeforeSigkill, 
+                    Signal.KILL).start();
+              } else {
+                controller.signalTask(user, pid, Signal.KILL);
+              }
             }
           } else {
             LOG.info(String.format("JVM Not killed %s but just removed", jvmId
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskRunner.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
index 625ef47..3084043 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
@@ -775,12 +775,14 @@ abstract class TaskRunner extends Thread {
 
   /**
    * Kill the child process
+   * @param dumpStacksBefore whether to wait a little before killing the task
    * @throws InterruptedException 
    * @throws IOException 
    */
-  public void kill() throws IOException, InterruptedException {
+  public void kill(boolean dumpStacksBefore) throws IOException,
+      InterruptedException {
     killed = true;
-    jvmManager.taskKilled(this);
+    jvmManager.taskKilled(this, dumpStacksBefore);
     signalDone();
   }
   public void signalDone() {
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index 8e2a56d..98b0acb 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -196,6 +196,8 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
 
   volatile boolean running = true;
 
+  private final static boolean DUMP_STACKS_BEFORE = true;
+  
   /**
    * Manages TT local storage directories.
    */
@@ -637,7 +639,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       tip = tasks.get(killAction.getTaskID());
     }
     LOG.info("Received KillTaskAction for task: " + killAction.getTaskID());
-    purgeTask(tip, false);
+    purgeTask(tip, false, !DUMP_STACKS_BEFORE);
   }
   
   private void checkJobStatusAndWait(TaskTrackerAction action) 
@@ -1603,7 +1605,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       new TreeMap<TaskAttemptID, TaskInProgress>();
     tasksToClose.putAll(tasks);
     for (TaskInProgress tip : tasksToClose.values()) {
-      tip.jobHasFinished(true, false);
+      tip.jobHasFinished(true, false, false);
     }
     
     this.running = false;
@@ -2399,7 +2401,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
           ReflectionUtils.logThreadInfo(LOG, "lost task", 30);
           tip.reportDiagnosticInfo(msg);
           myInstrumentation.timedoutTask(tip.getTask().getTaskID());
-          purgeTask(tip, true);
+          purgeTask(tip, true, DUMP_STACKS_BEFORE);
         }
       }
     }
@@ -2426,7 +2428,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
         rjob.distCacheMgr.release();
         // Add this tips of this job to queue of tasks to be purged 
         for (TaskInProgress tip : rjob.tasks) {
-          tip.jobHasFinished(false, false);
+          tip.jobHasFinished(false, false, false);
           Task t = tip.getTask();
           if (t.isMapTask()) {
             indexCache.removeMap(tip.getTask().getTaskID().toString());
@@ -2491,16 +2493,17 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
    * 
    * @param tip {@link TaskInProgress} to be removed.
    * @param wasFailure did the task fail or was it killed?
+   * @param whether to send quit signal before killing the task
    */
-  private void purgeTask(TaskInProgress tip, boolean wasFailure) 
-  throws IOException {
+  private void purgeTask(TaskInProgress tip, boolean wasFailure,
+      boolean dumpStacksBefore) throws IOException {
     if (tip != null) {
       LOG.info("About to purge task: " + tip.getTask().getTaskID());
         
       // Remove the task from running jobs, 
       // removing the job if it's the last task
       removeTaskFromJob(tip.getTask().getJobID(), tip);
-      tip.jobHasFinished(false, wasFailure);
+      tip.jobHasFinished(false, wasFailure, dumpStacksBefore);
       if (tip.getTask().isMapTask()) {
         indexCache.removeMap(tip.getTask().getTaskID().toString());
       }
@@ -2531,7 +2534,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
             " Killing task.";
           LOG.info(killMe.getTask().getTaskID() + ": " + msg);
           killMe.reportDiagnosticInfo(msg);
-          purgeTask(killMe, false);
+          purgeTask(killMe, false, !DUMP_STACKS_BEFORE);
         }
       }
     }
@@ -2793,7 +2796,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       LOG.warn(msg);
       tip.reportDiagnosticInfo(msg);
       try {
-        tip.kill(true);
+        tip.kill(true, false);
         tip.cleanup(false, true);
       } catch (IOException ie2) {
         LOG.info("Error cleaning up " + tip.getTask().getTaskID(), ie2);
@@ -3450,9 +3453,10 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
      * @param ttReInit is the TaskTracker executing re-initialization sequence?
      * @param wasFailure did the task fail, as opposed to was it killed by
      *                   the framework
+     * @param dumpStacksBefore whether the send a quit signal before killing the task
      */
-    public void jobHasFinished(boolean ttReInit, boolean wasFailure) 
-        throws IOException {
+    public void jobHasFinished(boolean ttReInit, boolean wasFailure,
+        boolean dumpStacksBefore) throws IOException {
       // Kill the task if it is still running
       synchronized(this){
         if (getRunState() == TaskStatus.State.RUNNING ||
@@ -3460,7 +3464,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
             getRunState() == TaskStatus.State.COMMIT_PENDING ||
             isCleaningup()) {
           try {
-            kill(wasFailure);
+            kill(wasFailure, dumpStacksBefore);
           } catch (InterruptedException e) {
             throw new IOException("Interrupted while killing " +
                 getTask().getTaskID(), e);
@@ -3475,10 +3479,12 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     /**
      * Something went wrong and the task must be killed.
      * @param wasFailure was it a failure (versus a kill request)?
+     * @param dumpStacksBefore if we should send a SIGQUIT before killing
      * @throws InterruptedException 
      */
-    public synchronized void kill(boolean wasFailure
-                                  ) throws IOException, InterruptedException {
+    public synchronized void kill(boolean wasFailure,
+                                  boolean dumpStacksBefore) throws IOException,
+                                  InterruptedException {
       if (taskStatus.getRunState() == TaskStatus.State.RUNNING ||
           taskStatus.getRunState() == TaskStatus.State.COMMIT_PENDING ||
           isCleaningup()) {
@@ -3488,7 +3494,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
         }
         // runner could be null if task-cleanup attempt is not localized yet
         if (runner != null) {
-          runner.kill();
+          runner.kill(dumpStacksBefore);
         }
         setTaskFailState(wasFailure);
       } else if (taskStatus.getRunState() == TaskStatus.State.UNASSIGNED) {
@@ -3841,7 +3847,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       LOG.fatal("Task: " + taskId + " - Killed due to Shuffle Failure: "
           + message);
       tip.reportDiagnosticInfo("Shuffle Error: " + message);
-      purgeTask(tip, true);
+      purgeTask(tip, true, !DUMP_STACKS_BEFORE);
     } else {
       LOG.warn("Unknown child task shuffleError: " + taskId + ". Ignored.");
     }
@@ -3858,7 +3864,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       validateJVM(tip, jvmContext, taskId);
       LOG.fatal("Task: " + taskId + " - Killed due to FSError: " + message);
       tip.reportDiagnosticInfo("FSError: " + message);
-      purgeTask(tip, true);
+      purgeTask(tip, true, !DUMP_STACKS_BEFORE);
     } else {
       LOG.warn("Unknown child task fsError: "+taskId+". Ignored.");
     }
@@ -3873,7 +3879,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     LOG.fatal("Task: " + taskId + " - Killed due to FSError: " + message);
     TaskInProgress tip = runningTasks.get(taskId);
     tip.reportDiagnosticInfo("FSError: " + message);
-    purgeTask(tip, true);
+    purgeTask(tip, true, !DUMP_STACKS_BEFORE);
   }
 
   /** 
@@ -3887,7 +3893,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       validateJVM(tip, jvmContext, taskId);
       LOG.fatal("Task: " + taskId + " - Killed : " + msg);
       tip.reportDiagnosticInfo("Error: " + msg);
-      purgeTask(tip, true);
+      purgeTask(tip, true, !DUMP_STACKS_BEFORE);
     } else {
       LOG.warn("Unknown child task fatalError: "+taskId+". Ignored.");
     }
@@ -4676,7 +4682,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     if (tip != null) {
       tip.reportDiagnosticInfo(diagnosticMsg);
       try {
-        purgeTask(tip, wasFailure); // Marking it as failed/killed.
+        purgeTask(tip, wasFailure, !DUMP_STACKS_BEFORE); // Marking it as failed/killed.
       } catch (IOException ioe) {
         LOG.warn("Couldn't purge the task of " + tid + ". Error : " + ioe);
       }
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestJvmManager.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestJvmManager.java
index 6e6b30d..008a46e 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestJvmManager.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestJvmManager.java
@@ -176,7 +176,7 @@ public class TestJvmManager {
     Thread killer = new Thread() {
       public void run() {
         try {
-          jvmRunner.kill();
+          jvmRunner.kill(false);
         } catch (IOException e) {
           e.printStackTrace();
           setThreadCaughtException();
@@ -191,7 +191,7 @@ public class TestJvmManager {
     Thread.sleep(100);
 
     // kill the jvm externally
-    taskRunner.kill();
+    taskRunner.kill(false);
 
     assertTrue(jvmRunner.killed);
 
-- 
1.7.0.4

